#include "transfer.h"
#include <ctime>

// H√†m l·∫•y th·ªùi gian hi·ªán t·∫°i
string getCurrentTime() {
    time_t now = time(0);
    tm *ltm = localtime(&now);
    char buffer[20];
    strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", ltm);
    return string(buffer);
}

// H√†m t√¨m user trong sheet
User findUser(XLWorksheet& sheet, const std::string& username) {
    for (int row = 2; sheet.cell(row, 1).value().type() != XLValueType::Empty; ++row) {
        if (sheet.cell(row, 2).value().get<std::string>() == username) {
            return { 
                username,
                sheet.cell(row, 3).value().type() == XLValueType::String ? 
                    sheet.cell(row, 3).value().get<std::string>() : "",  // N·∫øu r·ªóng, g√°n ""
                sheet.cell(row, 14).value().type() == XLValueType::String ? 
                    sheet.cell(row, 14).value().get<std::string>() : "",
                sheet.cell(row, 11).value().type() == XLValueType::Integer ? 
                    sheet.cell(row, 11).value().get<int>() : 0,
                row,
                sheet.cell(row, 12).value().type() == XLValueType::Integer ? 
                    (sheet.cell(row, 12).value().get<int>() == 1) : false
            };
        }
    }
    return { "", "", "", 0, 0, false };
}


// H√†m ghi log giao d·ªãch
void logTransaction(XLWorksheet& logSheet, int userId, const std::string& action, 
                    int oldValue, int newValue, int senderId, int recipientId) {
    if (logSheet.rowCount() == 0) {  // Ki·ªÉm tra xem sheet c√≥ d·ªØ li·ªáu kh√¥ng
        cout << "‚ö†Ô∏è L·ªói: Sheet log giao d·ªãch kh√¥ng h·ª£p l·ªá ho·∫∑c tr·ªëng!" << endl;
        return;
    }

    // T√¨m h√†ng tr·ªëng ƒë·∫ßu ti√™n (ki·ªÉm tra n·∫øu c·ªôt 1 tr·ªëng)
    int newRow = 2;
    while (logSheet.cell(newRow, 1).value().type() != XLValueType::Empty) {
        ++newRow;
    }

    string currentTime = getCurrentTime();

    logSheet.cell(newRow, 1).value() = newRow - 1;  // ID giao d·ªãch
    logSheet.cell(newRow, 2).value() = userId;
    logSheet.cell(newRow, 3).value() = action;
    logSheet.cell(newRow, 4).value() = oldValue;
    logSheet.cell(newRow, 5).value() = newValue;
    logSheet.cell(newRow, 6).value() = senderId;
    logSheet.cell(newRow, 7).value() = recipientId;
    logSheet.cell(newRow, 8).value() = currentTime;
}



// H√†m th·ª±c hi·ªán giao d·ªãch
void transferPoints(const std::string& filePathUser, const std::string& filePathLog) {
    XLDocument docUser;
    docUser.open(filePathUser);
     XLDocument docLog;
    docLog.open(filePathLog);
    auto userSheet = docUser.workbook().worksheet("Sheet1");
    auto logSheet = docLog.workbook().worksheet("Sheet1");


bool hasAdmin = false;
for (int row = 2; row <= userSheet.rowCount(); ++row) { // B·∫Øt ƒë·∫ßu t·ª´ h√†ng 2 (b·ªè qua ti√™u ƒë·ªÅ)
    if (userSheet.cell(row, 13).value().get<int>() == 1) { // C·ªôt M = index 13
        hasAdmin = true;
        break;
    }
}

if (!hasAdmin) {
    cout << "‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n admin n√†o!\n";
    return;
}

    string adminName = "admin";
    User admin = findUser(userSheet, adminName);
    if (admin.username.empty()) {
        cout << "‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n admin!\n";
        return;
    }

    string senderName, recipientName;
    int amount;

    cout << "üîß Nh·∫≠p t√†i kho·∫£n chuy·ªÉn: ";
    cin >> senderName;
    User sender = findUser(userSheet, senderName);
    if (sender.username.empty()) {
        cout << "‚ùå T√†i kho·∫£n g·ª≠i kh√¥ng h·ª£p l·ªá!\n";
        return;
    }

    cout << "üéØ Nh·∫≠p t√†i kho·∫£n nh·∫≠n: ";
    cin >> recipientName;
    User recipient = findUser(userSheet, recipientName);
    if (recipient.username.empty()) {
        cout << "‚ùå T√†i kho·∫£n nh·∫≠n kh√¥ng h·ª£p l·ªá!\n";
        return;
    }

    cout << "üí∏ Nh·∫≠p s·ªë ƒëi·ªÉm mu·ªën chuy·ªÉn: ";
    cin >> amount;
    if (amount <= 0) {
        cout << "‚ùå S·ªë ƒëi·ªÉm kh√¥ng h·ª£p l·ªá!\n";
        return;
    }

    // N·∫øu ng∆∞·ªùi g·ª≠i l√† client v√† mu·ªën chuy·ªÉn nhi·ªÅu h∆°n s·ªë ti·ªÅn c·ªßa admin ‚Üí kh√¥ng cho ph√©p
    if (!sender.is_admin && amount > admin.balance) {
        cout << "‚ùå S·ªë ƒëi·ªÉm c·∫ßn chuy·ªÉn l·ªõn h∆°n s·ªë d∆∞ c·ªßa admin. Giao d·ªãch b·ªã t·ª´ ch·ªëi!\n";
        return;
    }

    // N·∫øu ng∆∞·ªùi g·ª≠i kh√¥ng ƒë·ªß ti·ªÅn
    if (amount > sender.balance) {
        cout << "‚ùå T√†i kho·∫£n kh√¥ng ƒë·ªß ƒëi·ªÉm!\n";
        return;
    }

    // C·∫≠p nh·∫≠t s·ªë d∆∞
    int oldSenderBalance = sender.balance;
    int oldRecipientBalance = recipient.balance;
    sender.balance -= amount;
    recipient.balance += amount;

    userSheet.cell(sender.user_id, 11).value() = sender.balance;
    userSheet.cell(sender.user_id, 12).value() = "Chuy·ªÉn ti·ªÅn th√†nh c√¥ng";

    userSheet.cell(recipient.user_id, 11).value() = recipient.balance;
    userSheet.cell(recipient.user_id, 12).value() = "Nh·∫≠n ti·ªÅn";

    // Ghi log giao d·ªãch
    logTransaction(logSheet, sender.user_id, "Chuy·ªÉn ti·ªÅn th√†nh c√¥ng", oldSenderBalance, sender.balance, sender.user_id, recipient.user_id);
    logTransaction(logSheet, recipient.user_id, "Nh·∫≠n ti·ªÅn", oldRecipientBalance, recipient.balance, sender.user_id, recipient.user_id);

    cout << "‚úÖ Giao d·ªãch th√†nh c√¥ng!\n";

    docUser.save();
    docUser.close();

    docLog.save();
    docLog.close();
}
