#include <iostream>
#include <vector>
#include <string>
#include "OpenXLSX.hpp"

using namespace std;
using namespace OpenXLSX;

// H√†m t√¨m d√≤ng d·ª±a theo t√™n ng∆∞·ªùi d√πng
int findRowByName(XLWorksheet& sheet, const string& name) {
    for (int row = 2; sheet.cell(row, 1).value().type() != XLValueType::Empty; ++row) {
        if (sheet.cell(row, 2).value().get<string>() == name) {
            return row;
        }
    }
    return -1;
}

// H√†m th·ª±c hi·ªán giao d·ªãch n·∫°p ƒëi·ªÉm
void transferPoints(const string& filePath) {
    XLDocument doc;
    doc.open(filePath);
    auto sheet = doc.workbook().worksheet("User");

    string adminName = "admin";
    string clientName;
    int points;

    // X√°c ƒë·ªãnh d√≤ng c·ªßa admin v√† client
    int adminRow = findRowByName(sheet, adminName);
    if (adminRow == -1) {
        cout << "‚ùå Kh√¥ng t√¨m th·∫•y admin!\n";
        return;
    }

    char choice;
    do {
        cout << "üëâ Nh·∫≠p t√™n client c·∫ßn n·∫°p ƒëi·ªÉm: ";
        cin >> clientName;

        int clientRow = findRowByName(sheet, clientName);
        if (clientRow == -1) {
            cout << "‚ùå Kh√¥ng t√¨m th·∫•y client n√†y!\n";
            continue;
        }

        // L·∫•y balance hi·ªán t·∫°i
        int adminBalance = sheet.cell(adminRow, 7).value().get<int>();
        int clientBalance = sheet.cell(clientRow, 7).value().get<int>();

        // Nh·∫≠p s·ªë ƒëi·ªÉm mu·ªën n·∫°p
        cout << "üí∏ Nh·∫≠p s·ªë ƒëi·ªÉm mu·ªën chuy·ªÉn: ";
        cin >> points;

        if (points <= 0) {
            cout << "‚ö†Ô∏è S·ªë ƒëi·ªÉm ph·∫£i l·ªõn h∆°n 0!\n";
            continue;
        }

        if (adminBalance < points) {
            cout << "‚ùå Admin kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch!\n";
            continue;
        }

        // Th·ª±c hi·ªán giao d·ªãch
        sheet.cell(adminRow, 7).value() = adminBalance - points;
        sheet.cell(clientRow, 7).value() = clientBalance + points;

        // L∆∞u tr·∫°ng th√°i giao d·ªãch
        string status = "N·∫°p th√†nh c√¥ng " + to_string(points) + " ƒëi·ªÉm cho " + clientName;
        sheet.cell(clientRow, 8).value() = status;

        cout << "‚úÖ Giao d·ªãch th√†nh c√¥ng! Admin c√≤n " << adminBalance - points << " ƒëi·ªÉm.\n";
        cout << "üìå Tr·∫°ng th√°i: " << status << "\n";

        // H·ªèi ti·∫øp t·ª•c hay kh√¥ng
        cout << "üëâ B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c n·∫°p ƒëi·ªÉm cho client kh√°c kh√¥ng? (y/n): ";
        cin >> choice;

    } while (choice == 'y' || choice == 'Y');

    cout << "üëã K·∫øt th√∫c giao d·ªãch!\n";

    doc.save();
    doc.close();
}


struct User {
    std::string username, password, role;
    int balance, user_id;
    bool is_admin;
};

// H√†m t√¨m user trong sheet
User findUser(XLWorksheet& sheet, const std::string& username) {
    for (int row = 2; sheet.cell(row, 1).value().type() != XLValueType::Empty; ++row) {
        if (sheet.cell(row, 1).value().get<std::string>() == username) {
            return { username,
                     sheet.cell(row, 2).value().get<std::string>(),
                     sheet.cell(row, 13).value().get<std::string>(),
                     sheet.cell(row, 10).value().get<int>(),
                     row,
                     sheet.cell(row, 11).value().get<int>() == 1 };
        }
    }
    return { "", "", "", 0, 0, false };
}

// H√†m ghi log giao d·ªãch
void logTransaction(XLWorksheet& logSheet, int userId, const std::string& action, int oldValue, int newValue, int senderId, int recipientId) {
    int newRow = 2;
    while (logSheet.cell(newRow, 1).value().type() != XLValueType::Empty) ++newRow;

    logSheet.cell(newRow, 1).value() = newRow - 1;
    logSheet.cell(newRow, 2).value() = userId;
    logSheet.cell(newRow, 3).value() = action;
    logSheet.cell(newRow, 4).value() = oldValue;
    logSheet.cell(newRow, 5).value() = newValue;
    logSheet.cell(newRow, 6).value() = senderId;
    logSheet.cell(newRow, 7).value() = recipientId;
    logSheet.cell(newRow, 8).value() = "23/03/2025";
    logSheet.cell(newRow, 9).value() = "23/03/2025";
}

// H√†m th·ª±c hi·ªán giao d·ªãch
void transferPoints(const std::string& filePath) {
    XLDocument doc;
    doc.open(filePath);
    auto userSheet = doc.workbook().worksheet("User");
    auto logSheet = doc.workbook().worksheet("Transaction");

    std::string senderName, recipientName;
    int amount;

    std::cout << "üîß Nh·∫≠p t√†i kho·∫£n chuy·ªÉn: ";
    std::cin >> senderName;
    User sender = findUser(userSheet, senderName);
    if (sender.username.empty() || sender.balance <= 0) {
        std::cout << "‚ùå T√†i kho·∫£n kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë·ªß ƒëi·ªÉm!\n";
        return;
    }

    std::cout << "üéØ Nh·∫≠p t√†i kho·∫£n nh·∫≠n: ";
    std::cin >> recipientName;
    User recipient = findUser(userSheet, recipientName);
    if (recipient.username.empty()) {
        std::cout << "‚ùå T√†i kho·∫£n nh·∫≠n kh√¥ng t·ªìn t·∫°i!\n";
        return;
    }

    std::cout << "üí∏ Nh·∫≠p s·ªë ƒëi·ªÉm mu·ªën chuy·ªÉn: ";
    std::cin >> amount;
    if (amount <= 0 || amount > sender.balance) {
        std::cout << "‚ùå S·ªë ƒëi·ªÉm kh√¥ng h·ª£p l·ªá!\n";
        return;
    }

    // C·∫≠p nh·∫≠t ƒëi·ªÉm v√† tr·∫°ng th√°i giao d·ªãch
    int oldSenderBalance = sender.balance;
    int oldRecipientBalance = recipient.balance;
    sender.balance -= amount;
    recipient.balance += amount;

    userSheet.cell(sender.user_id, 10).value() = sender.balance;
    userSheet.cell(sender.user_id, 11).value() = "Chuy·ªÉn ti·ªÅn th√†nh c√¥ng";

    userSheet.cell(recipient.user_id, 10).value() = recipient.balance;
    userSheet.cell(recipient.user_id, 11).value() = "Nh·∫≠n ti·ªÅn";

    // Ghi log giao d·ªãch cho c·∫£ ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi nh·∫≠n
    logTransaction(logSheet, sender.user_id, "Chuy·ªÉn ti·ªÅn th√†nh c√¥ng", oldSenderBalance, sender.balance, sender.user_id, recipient.user_id);
    logTransaction(logSheet, recipient.user_id, "Nh·∫≠n ti·ªÅn", oldRecipientBalance, recipient.balance, sender.user_id, recipient.user_id);

    std::cout << "‚úÖ Giao d·ªãch th√†nh c√¥ng!\n";

    doc.save();
    doc.close();
}
