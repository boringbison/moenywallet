#include <iostream>
#include "OpenXLSX/OpenXLSX/OpenXLSX.hpp"

using namespace OpenXLSX;
using namespace std;

void readAndWriteExcel(const string& filePath) {
    XLDocument doc;
    doc.open(filePath);
    auto sheet = doc.workbook().worksheet("User");

    cout << "Danh s√°ch ng∆∞·ªùi d√πng:\n";
    for (int row = 1; sheet.cell(row, 2).value().type() != XLValueType::Empty; ++row) {
        string username = sheet.cell(row, 2).value().get<string>(); // C·ªôt 2 (Username)
        string email = sheet.cell(row, 3).value().get<string>();    // C·ªôt 3 (Email)

        // Ghi gi√° tr·ªã m·ªõi v√†o c·ªôt 6
        sheet.cell(row, 6).value() = "ƒê√£ x·ª≠ l√Ω";

        cout << "User: " << username << " | Email: " << email << " | C·ªôt 6: ƒê√£ x·ª≠ l√Ω" << endl;
    }

    doc.save(); // L∆∞u file sau khi s·ª≠a ƒë·ªïi
    doc.close();
}


void findByName(const string& filePath, const string& target) {
    XLDocument doc;
    doc.open(filePath);
    auto sheet = doc.workbook().worksheet("User");

    bool found = false;

    // Duy·ªát t·ª´ng h√†ng
    for (int row = 1; sheet.cell(row, 1).value().type() != XLValueType::Empty; ++row) {
        bool hasValue = false;

        // Duy·ªát t·ª´ng √¥ trong h√†ng
        for (int col = 1;; ++col) {
            auto cell = sheet.cell(row, col);

            // D·ª´ng khi g·∫∑p √¥ tr·ªëng trong c·ªôt
            if (cell.value().type() == XLValueType::Empty) {
                break;
            }

            // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã trong √¥ th√†nh chu·ªói
            string cellValue;
            switch (cell.value().type()) {
                case XLValueType::String:
                    cellValue = cell.value().get<string>();
                    break;
                case XLValueType::Integer:
                    cellValue = to_string(cell.value().get<int>());
                    break;
                case XLValueType::Float:
                    cellValue = to_string(cell.value().get<double>());
                    break;
                case XLValueType::Boolean:
                    cellValue = cell.value().get<bool>() ? "true" : "false";
                    break;
                default:
                    cellValue = "";
                    break;
            }

            if (!cellValue.empty()) {
                hasValue = true;
            }

            // So s√°nh gi√° tr·ªã c·∫ßn t√¨m
            if (cellValue == target) {
                found = true;
                cout << "‚úÖ T√¨m th·∫•y ·ªü d√≤ng " << row << ": ";

                // In ra to√†n b·ªô h√†ng
                for (int c = 1;; ++c) {
                    auto cellContent = sheet.cell(row, c);
                    if (cellContent.value().type() == XLValueType::Empty) break;
                    string contentValue;

                    // Chuy·ªÉn ƒë·ªïi √¥ trong d√≤ng th√†nh chu·ªói
                    switch (cellContent.value().type()) {
                        case XLValueType::String:
                            contentValue = cellContent.value().get<string>();
                            break;
                        case XLValueType::Integer:
                            contentValue = to_string(cellContent.value().get<int>());
                            break;
                        case XLValueType::Float:
                            contentValue = to_string(cellContent.value().get<double>());
                            break;
                        case XLValueType::Boolean:
                            contentValue = cellContent.value().get<bool>() ? "true" : "false";
                            break;
                        default:
                            contentValue = "";
                            break;
                    }

                    cout << contentValue << " | ";
                }

                cout << endl;
                break;  // D·ª´ng ki·ªÉm tra ti·∫øp d√≤ng n√†y
            }
        }

        if (!hasValue) continue;  // B·ªè qua h√†ng tr·ªëng ho√†n to√†n
    }

    if (!found) {
        cout << "‚ùå Kh√¥ng t√¨m th·∫•y gi√° tr·ªã '" << target << "' trong file!" << endl;
    }

    doc.close();
}


void updateById(const std::string& filePath, int targetId) {
    XLDocument doc;
    doc.open(filePath);
    auto sheet = doc.workbook().worksheet("User");

    bool found = false;

    // ƒê·ªçc h√†ng ƒë·∫ßu ti√™n ƒë·ªÉ l·∫•y t√™n c·ªôt
    std::vector<std::string> headers;
    for (int col = 1; ; ++col) {
        auto cell = sheet.cell(1, col);
        if (cell.value().type() == XLValueType::Empty) break;  // D·ª´ng khi g·∫∑p c·ªôt tr·ªëng
        headers.push_back(cell.value().get<std::string>());
    }

    // T√¨m d√≤ng c√≥ ID kh·ªõp
    for (int row = 2; sheet.cell(row, 1).value().type() != XLValueType::Empty; ++row) {
        int id = sheet.cell(row, 1).value().get<int>();

        if (id == targetId) {
            found = true;
            std::cout << "üîß Nh·∫≠p th√¥ng tin c·∫≠p nh·∫≠t:\n";

            // L·∫∑p qua t·ª´ng c·ªôt (b·ªè qua c·ªôt ID)
            for (int col = 1; col < headers.size(); ++col) {
                std::string newValue;
                std::cout << "Nh·∫≠p 'update" << headers[col] << "': ";
                std::cin >> newValue;

                // C·∫≠p nh·∫≠t gi√° tr·ªã v√†o √¥ t∆∞∆°ng ·ª©ng
                sheet.cell(row, col + 1).value() = newValue;
            }

            std::cout << "‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!\n";
            break;
        }
    }

    if (!found) {
        std::cout << "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " << targetId << std::endl;
    }

    doc.save();
    doc.close();
}


// int main() {
//     readAndWriteExcel("F:/qt/file.xlsx");
//     return 0;
// }


void deleteRowByName(const string& filePath, const string& target) {
    XLDocument doc;
    doc.open(filePath);
    auto sheet = doc.workbook().worksheet("User");

    bool found = false;

    // Duy·ªát t·ª´ng h√†ng
    for (int row = 1; sheet.cell(row, 1).value().type() != XLValueType::Empty; ++row) {
        // Duy·ªát t·ª´ng √¥ trong h√†ng
        for (int col = 1;; ++col) {
            auto cell = sheet.cell(row, col);

            // D·ª´ng n·∫øu g·∫∑p √¥ tr·ªëng
            if (cell.value().type() == XLValueType::Empty) break;

            // Chuy·ªÉn gi√° tr·ªã trong √¥ th√†nh chu·ªói
            string cellValue;
            switch (cell.value().type()) {
                case XLValueType::String:
                    cellValue = cell.value().get<string>();
                    break;
                case XLValueType::Integer:
                    cellValue = to_string(cell.value().get<int>());
                    break;
                case XLValueType::Float:
                    cellValue = to_string(cell.value().get<double>());
                    break;
                case XLValueType::Boolean:
                    cellValue = cell.value().get<bool>() ? "true" : "false";
                    break;
                default:
                    cellValue = "";
                    break;
            }

            // So s√°nh gi√° tr·ªã c·∫ßn t√¨m
            if (cellValue == target) {
                found = true;

                // X√≥a nguy√™n h√†ng
                cout << "üóëÔ∏è ƒê√£ x√≥a d√≤ng " << row << " ch·ª©a gi√° tr·ªã: " << target << endl;
                for (int c = 1; sheet.cell(row, c).value().type() != XLValueType::Empty; ++c) {
                    sheet.cell(row, c).value().clear();
                }

                // L√πi c√°c d√≤ng ph√≠a d∆∞·ªõi l√™n
                int nextRow = row + 1;
                while (sheet.cell(nextRow, 1).value().type() != XLValueType::Empty) {
                    for (int c = 1;; ++c) {
                        auto nextCell = sheet.cell(nextRow, c);
                        if (nextCell.value().type() == XLValueType::Empty) break;

                        // Di chuy·ªÉn d·ªØ li·ªáu l√™n h√†ng tr√™n
                        sheet.cell(row, c).value() = nextCell.value();
                        nextCell.value().clear();
                    }
                    row++;  // C·∫≠p nh·∫≠t v·ªã tr√≠ h√†ng v·ª´a l√πi l√™n
                    nextRow++;
                }

                doc.save();
                doc.close();
                return;  // K·∫øt th√∫c ngay sau khi x√≥a
            }
        }
    }

    if (!found) {
        cout << "‚ùå Kh√¥ng t√¨m th·∫•y gi√° tr·ªã '" << target << "' trong file!" << endl;
    }

    doc.close();
}


void addRowAfterLast(const std::string& filePath) {
    XLDocument doc;
    doc.open(filePath);
    auto sheet = doc.workbook().worksheet("User");

    std::vector<std::string> headers;

    // L·∫•y ti√™u ƒë·ªÅ t·ª´ d√≤ng 1
    for (int col = 1;; ++col) {
        auto cell = sheet.cell(1, col);
        if (cell.value().type() == XLValueType::Empty) break;
        headers.push_back(cell.value().get<std::string>());
    }

    char choice;
    do {
        // X√°c ƒë·ªãnh d√≤ng cu·ªëi c√πng c√≥ d·ªØ li·ªáu
        int newRow = 2;
        while (sheet.cell(newRow, 1).value().type() != XLValueType::Empty) {
            ++newRow;
        }

        std::cout << "üîß Nh·∫≠p th√¥ng tin cho d√≤ng m·ªõi (h√†ng " << newRow << "):\n";

        // Nh·∫≠p d·ªØ li·ªáu theo t·ª´ng c·ªôt
        for (int col = 0; col < headers.size(); ++col) {
            std::string newValue;
            std::cout << "Nh·∫≠p gi√° tr·ªã cho '" << headers[col] << "': ";
            std::cin >> newValue;

            sheet.cell(newRow, col + 1).value() = newValue;
        }

        std::cout << "‚úÖ ƒê√£ th√™m d√≤ng m·ªõi th√†nh c√¥ng t·∫°i d√≤ng " << newRow << "!\n";

        // H·ªèi ti·∫øp t·ª•c hay kh√¥ng
        std::cout << "üëâ B·∫°n c√≥ mu·ªën th√™m d√≤ng m·ªõi n·ªØa kh√¥ng? (y/n): ";
        std::cin >> choice;

    } while (choice == 'y' || choice == 'Y');

    std::cout << "üëã K·∫øt th√∫c th√™m d√≤ng!\n";

    doc.save();
    doc.close();
}
